import type { AnimationConfiguration, AnimationData, AnimationDirection } from '@/types';
import AnimationItem from '@/animation/AnimationItem';
import { RendererType } from '@/enums';
export default class AnimationManager {
    private static _isFrozen;
    private static _stopped;
    private static initTime;
    private static len;
    private static playingAnimationsNum;
    private static registeredAnimations;
    static destroy(animation?: string): void;
    static freeze(): void;
    static getRegisteredAnimations(): AnimationItem[];
    static goToAndStop(value: number, isFrame?: boolean, animation?: string): void;
    static loadAnimation(params: AnimationConfiguration): AnimationItem;
    static mute(animation?: string): void;
    static pause(animation?: string): void;
    static play(animation?: string): void;
    static registerAnimation(element: HTMLElement | null, animationData?: AnimationData): AnimationItem | null;
    static resize(): void;
    static searchAnimations(animationData?: AnimationData, standalone?: boolean, rendererFromProps?: RendererType): void;
    static setDirection(val: AnimationDirection, animation?: string): void;
    static setSpeed(val: number, animation?: string): void;
    static setVolume(val: number, animation?: string): void;
    static stop(animation?: string): void;
    static togglePause(animation?: string): void;
    static unfreeze(): void;
    static unmute(animation?: string): void;
    private static activate;
    private static addPlayingCount;
    private static first;
    private static removeElement;
    private static resume;
    private static setupAnimation;
    private static subtractPlayingCount;
}
