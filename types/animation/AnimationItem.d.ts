import type { AnimationConfiguration, AnimationData, AnimationDirection, AnimationEventName, DocumentData, LottieAsset, MarkerData, Vector2 } from '../types';
import { RendererType } from '../enums';
import { BaseEvent, LottieEvent } from '../events';
import SVGRenderer from '../renderers/SVGRenderer';
import AudioController from '../utils/audio/AudioController';
import { getExpressionsPlugin } from '../utils/getterSetter';
import ProjectInterface from '../utils/helpers/ProjectInterface';
import ImagePreloader from '../utils/ImagePreloader';
export default class AnimationItem extends BaseEvent {
    __complete?: boolean;
    animationData: AnimationData;
    animationID: string;
    assets: LottieAsset[];
    assetsPath: string;
    audioController: AudioController;
    autoplay: boolean;
    currentFrame: number;
    currentRawFrame: number;
    drawnFrameEvent: LottieEvent;
    expressionsPlugin: ReturnType<typeof getExpressionsPlugin>;
    firstFrame: number;
    frameModifier: AnimationDirection;
    frameMult: number;
    frameRate: number;
    imagePreloader: null | ImagePreloader;
    isLoaded: boolean;
    isPaused: boolean;
    isSubframeEnabled: boolean;
    loop: boolean | number;
    markers: MarkerData[];
    name: string;
    onError?: (arg: unknown) => void;
    path: string;
    playCount: number;
    playDirection: AnimationDirection;
    playSpeed: number;
    projectInterface: null | typeof ProjectInterface;
    renderer: null | SVGRenderer;
    segmentPos: number;
    segments: Vector2[];
    timeCompleted: number;
    totalFrames: number;
    wrapper: HTMLElement | null;
    protected animType?: RendererType;
    protected autoloadSegments: boolean;
    protected fileName?: string;
    protected initialSegment?: Vector2;
    protected onComplete: null | ((arg: unknown) => void);
    protected onDestroy: null | ((arg: unknown) => void);
    protected onEnterFrame: null | ((arg: unknown) => void);
    protected onLoopComplete: null | ((arg: unknown) => void);
    protected onSegmentStart: null | ((arg: unknown) => void);
    private _completedLoop;
    private _idle;
    constructor();
    adjustSegment(arr: Vector2, offset: number): void;
    advanceTime(value: number): void;
    checkLoaded(): void;
    checkSegments(offset: number): boolean;
    configAnimation(animData: AnimationData): void;
    destroy(name?: string): void;
    getAssetData(id?: string): LottieAsset | null;
    getAssetsPath(assetData: null | LottieAsset): string;
    getDuration(isFrame?: boolean): number;
    getMarkerData(markerName: number): MarkerData | null;
    getPath(): string;
    getVolume(): number;
    goToAndPlay(value: number, isFrame?: boolean, name?: string): void;
    goToAndStop(value: number, isFrame?: boolean, name?: string): void;
    gotoFrame(): void;
    hide(): void;
    imagesLoaded(): void;
    includeLayers(data: AnimationData): void;
    loadNextSegment(): void;
    loadSegments(): void;
    mute(name?: string): void;
    onSegmentComplete(data: AnimationData): void;
    onSetupError(): void;
    pause(name?: string): void;
    play(name?: string): void;
    playSegments(arr: Vector2 | Vector2[], forceFlag?: boolean): void;
    preloadImages(): void;
    renderFrame(_num?: number | null): void;
    resetSegments(forceFlag?: boolean): void;
    resize(width?: number, height?: number): void;
    setCurrentRawFrameValue(value: number): void;
    setData(wrapper: HTMLElement, animationDatFromProps?: AnimationData): void;
    setDirection(val: AnimationDirection, name?: string): void;
    setLoop(isLooping: boolean): void;
    setParams(params: AnimationConfiguration): void;
    setSegment(init: number, end: number): void;
    setSpeed(val: number, name?: string): void;
    setSubframe(flag: boolean): void;
    setupAnimation(data: AnimationData): void;
    setVolume(val: number, name?: string): void;
    show(): void;
    stop(name?: string): void;
    togglePause(name?: string): void;
    trigger(name: AnimationEventName): void;
    triggerConfigError(nativeError: unknown): void;
    triggerRenderFrameError(nativeError: unknown): void;
    unmute(name?: string): void;
    updaFrameModifier(): void;
    updateDocumentData(path: unknown[], documentData: DocumentData, index: number): void;
    waitForFontsLoaded(): void;
}
