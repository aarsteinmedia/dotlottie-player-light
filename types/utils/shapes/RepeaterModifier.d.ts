import type { ShapeGroupData } from '../../elements/helpers/shapes';
import type { ElementInterfaceIntersect, ElementInterfaceUnion, Shape } from '../../types';
import type { ValueProperty } from '../../utils/Properties';
import type ShapePath from '../../utils/shapes/ShapePath';
import Matrix from '../../utils/Matrix';
import ShapeModifier from '../../utils/shapes/ShapeModifier';
import TransformProperty from '../../utils/TransformProperty';
export default class RepeaterModifier extends ShapeModifier {
    _currentCopies?: number;
    _elements?: ShapeGroupData[];
    _groups?: ShapeGroupData[];
    arr?: ShapeGroupData[];
    c?: ValueProperty;
    data: any;
    elemsData?: any;
    eo: any;
    matrix?: Matrix;
    o: any;
    pMatrix?: Matrix;
    pos?: number;
    rMatrix?: Matrix;
    sMatrix?: Matrix;
    so: any;
    tMatrix?: Matrix;
    tr: any;
    applyTransforms(pMatrix: Matrix, rMatrix: Matrix, sMatrix: Matrix, transform: TransformProperty, perc: number, inv?: boolean): void;
    changeGroupRender(elements: Shape[], renderFlag?: boolean): void;
    cloneElements(elements: any[]): any;
    init(elem: ElementInterfaceUnion, arr: ShapeGroupData[], posFromProps?: number, elemsData?: ShapePath): void;
    initModifierProperties(elem: ElementInterfaceIntersect, data: any): void;
    processShapes(_isFirstFrame: boolean): boolean;
    resetElements(elements: Shape[]): void;
}
